* Appearance
** begin on *scratch*
#+BEGIN_SRC emacs-lisp
(setq initial-buffer-choice t)
#+END_SRC
** remove borders
#+BEGIN_SRC emacs-lisp
(if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
(if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
(if (fboundp 'menu-bar-mode) (menu-bar-mode -1))
#+END_SRC
** set text width
#+BEGIN_SRC emacs-lisp
(setq-default fill-column 79)
#+END_SRC
** theme
#+BEGIN_SRC emacs-lisp
(load-theme 'gruvbox-dark-hard t)
#+END_SRC
* Buffer editing
** ido-mode
#+BEGIN_SRC emacs-lisp
(use-package ido
:config
  (setq ido-enable-flex-matching t)
  (setq ido-everywhere t)
  (ido-mode 1))
#+END_SRC
** org
#+BEGIN_SRC emacs-lisp
(setq org-root-dir "~/documents/org/")
(use-package org
  :config
  (setq org-agenda-files (file-expand-wildcards (concat org-root-dir "agenda/*.org")))
  (setq org-startup-indented t)
  (setq org-directory org-root-dir)
  (global-set-key "\C-cl" 'org-store-link)
  (global-set-key "\C-ca" 'org-agenda)
  (global-set-key "\C-cc" 'org-capture)
  (global-set-key "\C-cb" 'org-switchb)
  (setq org-log-done t)
  (setq org-todo-keywords
    (quote ((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
      (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)" "PHONE" "MEETING"))))
  (add-hook 'org-mode-hook #'visual-line-mode))
#+END_SRC
*** org-journal
#+BEGIN_SRC emacs-lisp
(use-package org-journal
  :config
  (setq org-journal-file-format "%Y-%m-%d.org")
  (setq org-journal-time-format "")
  (setq org-journal-time-prefix "")
  (setq org-journal-dir (concat org-root-dir "journal/"))
  (setq org-extend-today-until 4))
#+END_SRC
*** org-ref
#+BEGIN_SRC emacs-lisp
(use-package org-ref
  :config
  (setq org-ref-bibliography-notes (concat org-root-dir "refs/refs.org")
  org-ref-default-bibliography '((concat org-root-dir "refs/refs.bib"))
  org-ref-pdf-directory (concat org-root-dir "refs/pdfs/")))
#+END_SRC
*** interleave
#+BEGIN_SRC emacs-lisp
(use-package interleave)
#+END_SRC
*** org-capture
#+BEGIN_SRC emacs-lisp
(use-package org-capture)
#+END_SRC
** whitespace-cleanup-mode
#+BEGIN_SRC emacs-lisp
(use-package whitespace-cleanup-mode
  :config
  (global-whitespace-cleanup-mode 1))
#+END_SRC
** lineker-mode
#+BEGIN_SRC emacs-lisp
(use-package lineker
  :config
  (add-hook 'java-mode-hook 'lineker-mode))
#+END_SRC
* Keybindings
** magit
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c g") 'magit-status)
#+END_SRC
** Scrolling
#+BEGIN_SRC emacs-lisp
(global-set-key "\M-n" 'scroll-up-line)
(global-set-key "\M-p" 'scroll-down-line)
#+END_SRC
* File organization
** Ignore symlink version control warning
#+BEGIN_SRC emacs-lisp
(setq vc-follow-symlinks t)
#+END_SRC
** Place all temp files in same dir
#+BEGIN_SRC emacs-lisp
;; Put backup files neatly away
(let ((backup-dir "~/.cache/emacs/backups")
      (auto-saves-dir "~/.cache/emacs/auto-saves/"))
  (dolist (dir (list backup-dir auto-saves-dir))
    (when (not (file-directory-p dir))
      (make-directory dir t)))
  (setq backup-directory-alist `(("." . ,backup-dir))
        auto-save-file-name-transforms `((".*" ,auto-saves-dir t))
        auto-save-list-file-prefix (concat auto-saves-dir ".saves-")
        tramp-backup-directory-alist `((".*" . ,backup-dir))
        tramp-auto-save-directory auto-saves-dir))

(setq backup-by-copying t    ; Don't delink hardlinks
      delete-old-versions t  ; Clean up the backups
      version-control t      ; Use version numbers on backups,
      kept-new-versions 5    ; keep some new versions
      kpept-old-versions 2)   ; and some old ones, too
#+END_SRC
* Behavior
** Default browser
#+begin_src emacs-lisp
(setq browse-url-browser-function 'browse-url-chrome)
#+end_src
** Always show column numbers
#+BEGIN_SRC emacs-lisp
(setq-default column-number-mode t)
#+END_SRC
** TRAMP path
#+begin_src emacs-lisp
(use-package tramp
:config
  (add-to-list 'tramp-remote-path 'tramp-own-remote-path))
#+end_src
